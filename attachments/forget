const express = require('express');
const bodyparser = require('body-parser');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const passport = require('passport');
const path = require('path');
const session = require('express-session');
const nodemailer = require('nodemailer');
const User = require('../model/user');

const router = express.Router();
router.post('/forgotpass', async(req,res) =>{  
    try{        
    const email = req.body.email;
    let user = await  User.findOne({email});
    if(!user){
        res.status(404).send(("Email ID not found"));
    }

    const token = await jwt.sign({_id:user.id},process.env.SECRET_KEY);
    res.status(200).header('x-auth-token',token);
    user.token=token;
    user.token_expires = Date.now()+60000;
    await user.save();    
    console.log (user); 
    let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
    user: 'apurvajaitly8@gmail.com',
    pass: 'apurvajaitly571'
  }
    })
    transporter.sendMail({
        to:user.email,
        from:"apurvajaitly8@gmail.com",
        subject:"Password Reset",
        html:
        'Please click on the following link, to complete the process:' +
        'http://' + req.headers.host + '/resetpass/?token=' + token  + 
        ' <br> <br>If you did not request this, please ignore this email and your password will remain unchanged.\n'
        })
        res.send("Mail sent! Check your email for reset password link");   
    }
catch(err){
    console.log(err);       
}    })

router.post('/resetpass/',async(req,res) =>{
    //  console.log(req.headers );
    //    let email= req.body.email;
    //    console.log(req.body);
    //     let user =  User.findOne({email:email})
    //     console.log(user);
    try{
         User.findOne({
            where:{
                reset_token:req.query.token,
                token_expires:  
                {
                    $gt:Date.now(),
                },
            },
        })
        .then(user => {
            console.log(user);  
            if(!user) 
            {
                  res.status(401).send(" Time expired! Request again for reset password ");
            }
                else     
                {
                    if(req.body.newPassword != req.body.verifyPassword ) 
                    {
                        res.send("Password does not match");
                    }
                    else
                    {
                        user.password =  bcrypt.hash(req.body.newPassword, 10);
                        user.reset_token = undefined;
                        user.token_expires = undefined;
                        res.json({message:"password has been reset"})
                         user.save() ;
                                let transporter = nodemailer.createTransport({
                                    service: 'gmail',
                                    auth: {
                                    user: 'apurvajaitly8@gmail.com',
                                    pass: 'apurvajaitly571'
                                  }
                                     })
                                transporter.sendMail({
                                    to:user.email,
                                    from:"apurvajaitly8@gmail.com",
                                    subject:"Password Reset Confirmation",
                                    html:"Password Reset done"
                                    })
                      
                }
                                      
                                    }
                            
                        });
           
        
        
                    
                    }
       catch(err){
           res.json({message:err})
       }

    //const token = User.reset_token;
    // const user = await User.findOne({ token});         
    //               console.log(user); 
                  //console.log(token);
                // if (!user) {
                //     res.send( 'Password reset token is invalid or has expired.');               
                // }                                                                                                                               
        
           
    // const token = queryString.token
    // if (token) {
    //     console.log(token);
    //   }
    // let user = await User.findOne((User.token === req.query.token) && (User.token_expires > Date.now()+60000)) 
    // if(!user) {
    //     res.status(401).send(" Time expired! Request again for reset password ")
    // }
//    
    });
module.exports = router;
